<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="0">
        <!-- Salary Rule Categories -->
        <record id="fine_salary_rule_category" model="hr.salary.rule.category">
            <field name="name">Fine</field>
            <field name="code">FINE</field>
        </record>
        <record id="annual_allowance_salary_rule_category" model="hr.salary.rule.category">
            <field name="name">Annual Allowance</field>
            <field name="code">ANALW</field>
        </record>
        <record id="non_taxable_allowance_salary_rule_category" model="hr.salary.rule.category">
            <field name="name">Non Taxable Allowance</field>
            <field name="code">NALW</field>
        </record>
        <record id="employee_contribution_salary_rule_category" model="hr.salary.rule.category">
            <field name="name">Employee Contribution</field>
            <field name="code">EMP</field>
        </record>
        <record id="employee_advance_salary_rule_category" model="hr.salary.rule.category">
            <field name="name">Advance</field>
            <field name="code">ADV</field>
        </record>
        <record id="employee_advance_due_category" model="hr.salary.rule.category">
            <field name="name">Due</field>
            <field name="code">DUE</field>
        </record>

        <!-- Contribution Registers -->
        <record id="contrib_register_ird" model="hr.contribution.register">
            <field name="name">IRD</field>
            <field name="partner_id" eval="False"/>
        </record>
        <record id="contrib_register_ssf" model="hr.contribution.register">
            <field name="name">Social Security Fund</field>
            <field name="partner_id" eval="False"/>
        </record>
        <record id="contrib_register_employee" model="hr.contribution.register">
            <field name="name">Employee</field>
            <field name="partner_id" eval="False"/>
        </record>

        <!-- Salary Rules -->
        <record id="hr_payroll.hr_rule_basic" model="hr.salary.rule">
            <field name="name">Basic Salary</field>
            <field name="sequence" eval="1"/>
            <field name="code">BASIC</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
time_factor = payslip.payslip_days / 30
if contract.paid_hourly_attendance:
 result = contract.wage * contract.total_allocated_hours * time_factor
            </field>
        </record>
        
        <record id="hr_payroll.hr_rule_taxable" model="hr.salary.rule">
            <field name="name">Gross</field>
            <field name="sequence" eval="100"/>
            <field name="code">GROSS</field>
            <field name="category_id" ref="hr_payroll.GROSS"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = categories.BASIC + categories.ALW + categories.FINE + categories.EMP + categories.ANALW
            </field>
        </record>

        <record id="hr_payroll.hr_rule_net" model="hr.salary.rule">
            <field name="name">TOTAL (Net Salary)</field>
            <field name="sequence" eval="200"/>
            <field name="code">NET</field>
            <field name="category_id" ref="hr_payroll.NET"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = categories.BASIC + categories.ALW + categories.DED +  categories.ADV + categories.NALW + categories.FINE + categories.EMP + categories.ANALW
            </field>
            <field name="register_id" ref="hr_payroll.contrib_register_employees"/>
        </record>

        <record id="hr_rule_overtime" model="hr.salary.rule">
            <field name="name">Overtime</field>
            <field name="code">OT</field>
            <field name="sequence">6</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = contract.paid_hourly_attendance
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

overtime = 0.0
overtime_rate = 0.0
total_allocated_hours = 0.0
buffer_hours = 0.0
time_factor = 0.0

time_factor = payslip.payslip_days / 30
total_allocated_hours = contract.total_allocated_hours * time_factor
buffer_hours = contract.overtime_buffer_hours * time_factor

if worked_days.ATTN.number_of_hours > (total_allocated_hours  + buffer_hours):
 overtime = worked_days.ATTN.number_of_hours - total_allocated_hours - buffer_hours
overtime_rate = (categories.BASIC + ((contract.allowance_khaja_tax + contract.allowance_trans_tax + contract.bonus)* time_factor)) / (240 * time_factor)

result = overtime_rate * overtime * contract.overtime_pay_factor
            </field>
        </record>

        <record id="hr_rule_undertime_fine" model="hr.salary.rule">
            <field name="name">Undertime Fine</field>
            <field name="code">UTF</field>
            <field name="sequence">8</field>
            <field name="category_id" ref="fine_salary_rule_category"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'
result = contract.paid_hourly_attendance
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

time_factor = payslip.payslip_days / 30
undertime = 0
undertime_rate= 0
total_allocated_hours = contract.total_allocated_hours * time_factor
buffer_hours = contract.undertime_buffer_hours * time_factor

if worked_days.ATTN.number_of_hours &lt; (total_allocated_hours - buffer_hours ):
 undertime = worked_days.ATTN.number_of_hours - total_allocated_hours + buffer_hours
undertime_rate= (categories.BASIC + ((contract.allowance_khaja_tax + contract.allowance_trans_tax + contract.bonus)* time_factor)) / (240 * time_factor)
result = undertime_rate * undertime * contract.undertime_fine_factor
            </field>
        </record>

        <record id="hr_rule_bonus" model="hr.salary.rule">
            <field name="name">Bonus</field>
            <field name="code">BONUS</field>
            <field name="sequence">4</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

#result = inputs.BNS and inputs.BNS.amount
time_factor = payslip.payslip_days / 30
result = contract.bonus * time_factor
            </field>
        </record>

        <record id="hr_rule_fine" model="hr.salary.rule">
            <field name="name">Fine</field>
            <field name="code">FINE</field>
            <field name="sequence">11</field>
            <field name="category_id" ref="fine_salary_rule_category"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

result = inputs.FINE and -inputs.FINE.amount
            </field>
        </record>

        <record id="hr_rule_non_tax_lunch" model="hr.salary.rule">
            <field name="name">Khaja &amp; Khana</field>
            <field name="code">KHAJA-NTX</field>
            <field name="sequence">150</field>
            <field name="category_id" ref="non_taxable_allowance_salary_rule_category"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

time_factor = payslip.payslip_days / 30
result = contract.allowance_khaja * time_factor
            </field>
        </record>

        <record id="hr_rule_transportation" model="hr.salary.rule">
            <field name="name">Transportation [Non Taxable]</field>
            <field name="code">TRANS-NTX</field>
            <field name="sequence">155</field>
            <field name="category_id" ref="non_taxable_allowance_salary_rule_category"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

time_factor = payslip.payslip_days / 30
result = contract.allowance_trans * time_factor
            </field>
        </record>

        <record id="hr_rule_tds" model="hr.salary.rule">
            <field name="name">TDS</field>
            <field name="code">TDS</field>
            <field name="sequence">130</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
#--------------------------------------------------------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

# time factor for the payslip duration other than 30 days, example 10 days, 14 days etc.
time_factor = payslip.payslip_days / 30

# tax_slabs = [350000,100000,200000,1350000,0] as of 2075/7076
tax_slabs = [400000,100000,200000,1300000,0]
tax_rates = [1,10,20,30,36]
annual_gross = categories.ANALW

# process tax slab
total_tax = 0.00
i=0
tax_slab = ((categories.GROSS - annual_gross ) * (12 / time_factor)) + annual_gross - tax_slabs[0]
tax_slab_calculate = (categories.GROSS - annual_gross ) * (12 / time_factor)
while tax_slab > 0:
 total_tax += tax_rates[i] * tax_slabs[i] * 0.01
 i += 1
 if i >= len(tax_rates) - 1:
  break
 tax_slab_calculate = tax_slab
 tax_slab -= tax_slabs[i]
total_tax += tax_rates[i] * tax_slab_calculate * 0.01
result = -(total_tax / (12 / time_factor) + (tax_rates[i] * annual_gross * 0.01))
            </field>
            <field name="register_id" ref="contrib_register_ird"/>
        </record>

        <record id="hr_rule_tax_khaja" model="hr.salary.rule">
            <field name="name">Khaja</field>
            <field name="code">KHAJA</field>
            <field name="sequence">70</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
#-------------------------------------------------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

time_factor = payslip.payslip_days / 30
result = contract.allowance_khaja_tax * time_factor
            </field>
        </record>

        <record id="hr_rule_tax_trans" model="hr.salary.rule">
            <field name="name">Transportation</field>
            <field name="code">TRANS</field>
            <field name="sequence">72</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

time_factor = payslip.payslip_days / 30
result = contract.allowance_trans_tax * time_factor
            </field>
        </record>

        <record id="hr_rule_tax_emp_ssf" model="hr.salary.rule">
            <field name="name">Social Security Fund (EMP)</field>
            <field name="code">SSF-EMP</field>
            <field name="sequence">90</field>
            <field name="category_id" ref="employee_contribution_salary_rule_category"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">percentage</field>
            <field name="amount_percentage_base">categories.BASIC</field>
            <field name="quantity">-1.0</field>
            <field name="amount_percentage">10.0</field>
            <field name="register_id" ref="contrib_register_ssf"/>        
        </record>

        <record id="hr_rule_tax_comp_ssf" model="hr.salary.rule">
            <field name="name">Social Security Fund (COMP)</field>
            <field name="code">SSF-COMP</field>
            <field name="sequence">300</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">percentage</field>
            <field name="amount_percentage_base">categories.BASIC</field>
            <field name="quantity">1.0</field>
            <field name="amount_percentage">11.67</field>
            <field name="register_id" ref="contrib_register_ssf"/>        
        </record>

        <record id="hr_rule_tax_upadan" model="hr.salary.rule">
            <field name="name">Upadan (Bonus)</field>
            <field name="code">UPADAN</field>
            <field name="sequence">331</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">percentage</field>
            <field name="amount_percentage_base">categories.BASIC</field>
            <field name="quantity">1.0</field>
            <field name="amount_percentage">8.33</field>
            <field name="register_id" ref="contrib_register_ssf"/>
        </record>

        <record id="hr_rule_salary_advance" model="hr.salary.rule">
            <field name="name">Salary Advance</field>
            <field name="code">ADVANCE</field>
            <field name="sequence">170</field>
            <field name="category_id" ref="employee_advance_salary_rule_category"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'

credit = contract.employee_id.address_home_id.credit
net = categories.BASIC + categories.ALW + categories.DED + categories.NALW + categories.FINE + categories.EMP
if credit >= net:
 result = -net
else:
 result = -contract.employee_id.address_home_id.credit
            </field>
            <field name="register_id" ref="contrib_register_employee"/>
        </record>

        <record id="hr_rule_salary_remaining_due_advance" model="hr.salary.rule">
            <field name="name">Remaining Advance Due</field>
            <field name="code">ADVANCE</field>
            <field name="sequence">210</field>
            <field name="category_id" ref="employee_advance_due_category"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.

# Note: returned value have to be set in the variable 'result'
credit = contract.employee_id.address_home_id.credit
salary_adv = categories.ADV
if credit:
 result = -(credit + salary_adv)
else:
 result = 0.0
            </field>
            <field name="register_id" ref="contrib_register_employee"/>
        </record>

        <record id="hr_rule_dashain_health_bonus" model="hr.salary.rule">
            <field name="name">Dashain Health Bonus</field>
            <field name="code">Dashain</field>
            <field name="sequence">5</field>
            <field name="category_id" ref="annual_allowance_salary_rule_category"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = contract.dashain_health_bonus
            </field>
        </record>
    </data>
</odoo>
